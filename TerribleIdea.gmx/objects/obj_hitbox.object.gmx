<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hitbox_icon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_hitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = spr_hitbox;

fighter = noone;

xOffset = 0;
yOffset = 0;

damaging = false;
isProjectile = false;

damage_active = 0;

linked = ds_list_create();

madeNoise = false;

bothWays = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (damage_active == 1)
    damage_active = 2;

if (fighter != noone)
{
    x = x_convert(fighter.x + fighter.facing * xOffset);
    y = y_convert(fighter.y + yOffset);
}

if (damaging &amp;&amp; !isProjectile &amp;&amp; !madeNoise)
{
    audio_play_sound(snd_miss,0,false);
    madeNoise = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hitbox">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!isProjectile)
{
    if ((!other.isProjectile &amp;&amp; other.fighter != fighter) ||
        (other.isProjectile &amp;&amp; other.fighter.maker != fighter))
    {
        if (other.damaging &amp;&amp; other.damage_active &gt; 1)
        {
            if (!damaging || other.pow &gt; pow)
            {
                if (!fighter.isZombie)
                {
                    if (!other.bothWays)
                        fighter_damage(fighter, other.pow, pi/2 - (pi/2 - other.angle) * other.fighter.facing);
                    else
                    {
                        mirror = 1;
                        if (x &lt; other.x)
                            mirror = -1;
                        fighter_damage(fighter, other.pow, pi/2 - (pi/2 - other.angle) * mirror);
                    }
                    hitbox_disable(other);
                    
                    audio_stop_sound(snd_miss);
                    audio_play_sound(snd_hit,0,false)
                }
                else
                {
                    if (!other.fighter.isZombie &amp;&amp; other.fighter != fighter.maker)
                    {
                        if (other.image_xscale &lt; global.UNIT_WIDTH * 19 / 64)
                        {
                            with (fighter)
                            {
                                if (fighter_on_ground(self.id))
                                {
                                    if (spawnTimer &lt;= timerMax)
                                        spawnTimer = timerMax * 2;
                                }
                                else
                                {
                                    instance_destroy();
                                }
                            }
                        }
                        
                        hitbox_disable(other);
                    
                        audio_stop_sound(snd_miss);
                        audio_play_sound(snd_hit,0,false)
                    }
                    else if (other.fighter.isZombie &amp;&amp; other.fighter.maker != fighter.maker)
                    {
                        with (fighter)
                        {
                            if (fighter_on_ground(self.id))
                            {
                                if (spawnTimer &lt;= timerMax)
                                    spawnTimer = timerMax * 2;
                            }
                            else
                            {
                                instance_destroy();
                            }
                        }
                        
                        with (other.fighter)
                        {
                            if (fighter_on_ground(self.id))
                            {
                                if (spawnTimer &lt;= timerMax)
                                    spawnTimer = timerMax * 2;
                            }
                            else
                            {
                                instance_destroy();
                            }
                        }
                        
                        hitbox_disable(fighter.hitbox);
                        hitbox_disable(other.fighter.hitbox);
                    
                        audio_stop_sound(snd_miss);
                        audio_play_sound(snd_hit,0,false)
                    }
                }
                
                
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.seeHitboxes)
    draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
