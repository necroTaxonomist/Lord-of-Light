<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_zombie_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>width = 1.25;
height = 2;

walk_speed = .5;
fall_speed = 1.0;
jump_speed = 1.0;
dash_speed = 1.0;
fric = 1.0;

walkTimer = 0;

walkSprite = spr_zombie_walk;
jumpSprite = spr_zombie_jump;

hurtbox = create_hitbox(self.id, width, height, 0, height/2);

hitbox = create_hitbox(self.id, width, height, 0, height/2);

xOffset = 2;
yOffset = 0;

hitbox.damaging = true;
hitbox.isProjectile = true;
hitbox.pow = 2.5;
hitbox.angle = pi/4;
hitbox.damage_active = 2;

timerMax = 50;
spawnTimer = timerMax;
startAction = 0;

isZombie = true;

audio_play_sound(snd_raise,0,false);

isHit = false;

waiting = 0;
max_wait_time = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (hurtbox)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (spawnTimer &gt; 0)
    exit;

if (!fighter_on_ground(self))
{
    vspeed -= global.BASE_GRAVITY * fall_speed;
}
else
{
    if (hspeed == 0 &amp;&amp; waiting == 0)
    {
        x += global.BASE_WALK_SPEED * walk_speed * facing;
        walkTimer += (global.BASE_WALK_SPEED * walk_speed) / (width / 2);
    }
    
    if (hspeed != 0)
    {
        speedDir = sign(hspeed);
        hspeed -= global.BASE_FRICTION * fric * speedDir;
        
        if (sign(hspeed) != speedDir)
            hspeed = 0;
    }
    
    if (vspeed &lt; 0)
    {
        vspeed = 0;
    }
    
    if (y &lt; global.GROUND_HEIGHT)
    {
        y = global.GROUND_HEIGHT;
    }
}

if (x + width/2 &gt;= global.WORLD_WIDTH/2)
{
    if (hspeed &gt; 0)
        hspeed = 0;
    if (x + width/2 &gt; global.WORLD_WIDTH/2)
        x =  global.WORLD_WIDTH/2 - width/2;
    
    if (facing &gt; 0 &amp;&amp; spawnTimer &lt;= timerMax)
        spawnTimer = timerMax * 2;
}

if (x - width/2 &lt;= -global.WORLD_WIDTH/2)
{
    if (hspeed &lt; 0)
        hspeed = 0;
    if (x - width/2 &lt; -global.WORLD_WIDTH/2)
        x = -global.WORLD_WIDTH/2 + width/2;
    
    if (facing &lt; 0 &amp;&amp; spawnTimer &lt;= timerMax)
        spawnTimer = timerMax * 2;
}

if (hitbox.damage_active == 0 &amp;&amp; waiting == 0)
{
    //if (spawnTimer &lt;= timerMax)
        //spawnTimer = timerMax * 2;
    waiting = max_wait_time;
}

if (waiting &gt; 0)
{
    waiting -= 1;
    
    if (waiting == 0)
        hitbox.damage_active = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (spawnTimer &gt; 0)
    spawnTimer--;

if (spawnTimer &gt; timerMax / 2)
{
    if (spawnTimer &lt; timerMax + 1)
    {
        if (maker.controller.left)
            startAction = -1;
        else if (maker.controller.right)
            startAction = 1;
        else if (maker.controller.up)
            startAction = 2;
        else if (maker.controller.down)
            startAction = 0;
    }
}



if (spawnTimer == 0)
{
    if (startAction = -1)
        hspeed -= global.BASE_DASH_SPEED * dash_speed;
    else if (startAction = 1)
        hspeed += global.BASE_DASH_SPEED * dash_speed;
    else if (startAction = 2)
        vspeed += global.BASE_JUMP_SPEED * jump_speed;
    
    spawnTimer = -1;
}

if (spawnTimer &gt; 2*timerMax - 3)
{
    if (hspeed != 0)
        hspeed = 0;
    if (!isHit)
    {
        with (hurtbox)
        {
            instance_destroy();
        }
        isHit = true;
    }
}

if (spawnTimer == timerMax + 1)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite = noone;
frame = 0;

if (spawnTimer &gt;= 0 &amp;&amp; spawnTimer &lt;= timerMax)
{
    sprite = spr_zombie_rise;
    frame = floor((timerMax - spawnTimer) / timerMax * 9);
}
else if (spawnTimer &gt; timerMax)
{
    sprite = spr_zombie_rise;
    frame = floor((spawnTimer - timerMax) / timerMax * 9);
}
else if (fighter_on_ground(self) &amp;&amp; hspeed == 0)
{
    sprite = walkSprite;
    frame = walkTimer mod 2;
}
else
{
    sprite = jumpSprite;
}

if (sprite != noone)
{
    draw_sprite_ext(sprite, frame,
                x_convert(x), y_convert(y),
                facing,1,
                0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>36,96</point>
    <point>48,48</point>
  </PhysicsShapePoints>
</object>
