<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>options[0] = obj_sam;
options[1] = obj_agni;
options[2] = obj_nirriti;
options[3] = obj_shiva;
options[4] = obj_ratri;
options[5] = obj_yama;

previews[0] = spr_sam_stand;
previews[1] = spr_agni_stand;
previews[2] = spr_nirriti_stand;
previews[3] = spr_shiva_stand;
previews[4] = spr_ratri_stand;
previews[5] = spr_yama_stand;

p1Cursor = 0;
p2Cursor = 5;

p1Ctrl = global.p1Ctrl;
p2Ctrl = global.p2Ctrl;

p1Locked = false;
p2Locked = false;

goToMatch = 0;

hiyaSound = snd_hiya;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (goToMatch == 1 &amp;&amp; !audio_is_playing(hiyaSound))
{
    goToMatch = -1;
    global.p1Char = options[p1Cursor];
    global.p2Char = options[p2Cursor];
    instance_create(0,0,obj_transition);
}

if (goToMatch != 0)
    exit;

if (!p1Locked)
{
    if (p1Ctrl.rightP)
        p1Cursor = (p1Cursor + 1) mod 6;
    if (p1Ctrl.upP)
        p1Cursor = (p1Cursor + 3) mod 6;
    if (p1Ctrl.leftP)
        p1Cursor = (p1Cursor + 5) mod 6;
    if (p1Ctrl.downP)
        p1Cursor = (p1Cursor + 3) mod 6;
    if (p1Ctrl.punch)
        p1Locked = true;
}
else
{
    if (p1Ctrl.kick)
        p1Locked = false;
}

if (!p2Locked)
{
    if (p2Ctrl.rightP)
        p2Cursor = (p2Cursor + 1) mod 6;
    if (p2Ctrl.upP)
        p2Cursor = (p2Cursor + 3) mod 6;
    if (p2Ctrl.leftP)
        p2Cursor = (p2Cursor + 5) mod 6;
    if (p2Ctrl.downP)
        p2Cursor = (p2Cursor + 3) mod 6;
    if (p2Ctrl.punch)
        p2Locked = true;
}
else
{
    if (p2Ctrl.kick)
        p2Locked = false;
}

if (p1Ctrl.pause || p2Ctrl.pause)
{
    if (p1Locked &amp;&amp; p2Locked)
    {
        if (goToMatch == 0)
        {
            audio_play_sound(hiyaSound, 0, false);
            goToMatch = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (r = 0; r &lt; 2; r += 1)
{
    for (c = 0; c &lt; 3; c += 1)
    {
        draw_sprite(spr_portrait, 3*r + c,
                    room_width/2 + 64 * (c-1),
                    room_height - 96 + 40 * r);
        if (p1Cursor == 3*r + c)
        {
            draw_sprite(spr_cursor, 2*p1Locked,
                        room_width/2 + 64 * (c-1),
                        room_height - 96 + 40 * r);
        }
        if (p2Cursor == 3*r + c)
        {
            draw_sprite(spr_cursor, 1 + 2*p2Locked,
                        room_width/2 + 64 * (c-1),
                        room_height - 96 + 40 * r);
        }
    }
}

draw_sprite(spr_charsel, 0, 0, 0);

draw_sprite(previews[p1Cursor], 2, room_width/2 - 72, 96);
draw_sprite_ext(previews[p2Cursor], 2, room_width/2 + 72, 96,-1,1,0,c_white,1);

draw_sprite(spr_char_name, p1Cursor, room_width/2 - 72, 48);
draw_sprite(spr_char_name, p2Cursor, room_width/2 + 72, 48);

if (p1Locked &amp;&amp; p2Locked)
    draw_sprite(spr_start_stacked, 0, room_width/2, room_height/3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
