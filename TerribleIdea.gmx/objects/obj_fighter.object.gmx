<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fighter_pholder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>characterIndex = -1;

width = 1.25;
height = 2;

walk_speed = 1.0;
air_speed = 1.0;
fall_speed = 1.0;
jump_speed = 1.0;
dash_speed = 1.0;
fric = 1.0;
weight = 1.0;
max_health = 100;

move_direction = 0;
dashing = false;
currentAttack = -1;
attackProgress = 0;
attackHitboxOut = false;
blocking = false;
facing = 1;
hitstun = 0;
walkTimer = 0;
movable = true;
canShoot = true;

for (r = 0; r &lt; 6; r += 1)
{
    for (c = 0; c &lt; 3; c += 1)
    {
        attackDurations[r,c] = 0;
    }
}
//[windup windup+hitbox total]

standSprite = noone;
walkSprite = noone;
blockSprite = noone;

jumpFSprite = noone;
jumpBSprite = noone;

for (h = 0; h &lt; 6; h += 1)
{
    attackHitboxes[h] = noone;
    attackSprites[h] = noone;
    projectiles[h] = noone;
}

controller = noone;
healthBar = noone;
target = noone;

hurtbox = create_hitbox(self.id, width, height, 0, height/2);

isZombie = false;

darkened = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (speed &gt; global.TERMINAL_VELOCITY)
{
    show_debug_message(speed);
    hspeed *= global.TERMINAL_VELOCITY / speed;
    vspeed *= global.TERMINAL_VELOCITY / speed;
}

if (hitstun &gt; 0)
    hitstun -= 1;

if (!fighter_on_ground(self))
{
    if (movable)
    {
        x += global.BASE_AIR_SPEED * air_speed * move_direction;
    
        vspeed -= global.BASE_GRAVITY * fall_speed;
    }
}
else
{
    if (move_direction != 0 &amp;&amp; movable)
    {
        x += global.BASE_WALK_SPEED * walk_speed * move_direction;
        walkTimer += (global.BASE_WALK_SPEED * walk_speed) / (width / 2);
    }
    
    
    if (hspeed != 0)
    {
        speedDir = sign(hspeed);
        hspeed -= global.BASE_FRICTION * fric * speedDir;
        
        if (sign(hspeed) != speedDir)
            hspeed = 0;
    }
    
    if (dashing &amp;&amp; hspeed == 0)
    {
        dashing = false;
        hitstun += global.END_DASH_LAG;
    }
    
    if (vspeed &lt; 0)
    {
        vspeed = 0;
    }
    
    if (y &lt; global.GROUND_HEIGHT)
    {
        y = global.GROUND_HEIGHT;
    }
    
    if (currentAttack &gt;= 3)
    {
        if (attackProgress &gt; attackDurations[currentAttack, 0])
            hitstun += (attackDurations[currentAttack, 2] - attackProgress) / 2;
        instance_deactivate_object(attackHitboxes[currentAttack]);
        currentAttack = -1;
        attackProgress = 0;
        attackHitboxOut = false; 
    }
}

if (x + width/2 &gt;= global.WORLD_WIDTH/2)
{
    if (hspeed &gt; 0)
        hspeed = 0;
    if (x + width/2 &gt; global.WORLD_WIDTH/2)
        x =  global.WORLD_WIDTH/2 - width/2;
}

if (x - width/2 &lt;= -global.WORLD_WIDTH/2)
{
    if (hspeed &lt; 0)
        hspeed = 0;
    if (x - width/2 &lt; -global.WORLD_WIDTH/2)
        x = -global.WORLD_WIDTH/2 + width/2;
}

if (walkTimer != 0 &amp;&amp; move_direction == 0)
{
    walkTimer = 0;
}

if (!movable)
{
    hspeed = 0;
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (fighter_on_ground(self.id) &amp;&amp; target != noone)
{
    d = sign(target.x - x);
    if (d != 0 &amp;&amp; d != facing)
    {
        facing = d;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (currentAttack != -1)
{
    if (attackSprites[currentAttack] == noone)
    {
        currentAttack = -1;
    }
    else
    {
        attackProgress += 1;
        if (attackProgress &gt; attackDurations[currentAttack, 2])
        {
            currentAttack = -1;
            attackProgress = 0;
        }
        else if (attackProgress &gt; attackDurations[currentAttack, 1])
        {
            if (attackHitboxOut)
            {
                if (attackHitboxes[currentAttack] != noone)
                    instance_deactivate_object(attackHitboxes[currentAttack]);
                attackHitboxOut = false;
            }
        }
        else if (attackProgress &gt; attackDurations[currentAttack, 0])
        {
            if (!attackHitboxOut)
            {
                if (attackHitboxes[currentAttack] != noone)
                {
                    instance_activate_object(attackHitboxes[currentAttack]);
                    attackHitboxes[currentAttack].damage_active = 1;
                    attackHitboxes[currentAttack].madeNoise = false;
                }
                if (projectiles[currentAttack] != noone &amp;&amp; canShoot)
                {
                    create_projectile(self.id, projectiles[currentAttack]);
                }
                attackHitboxOut = true;
            }
        }
    }
}

move_action = false;

if (fighter_can_act(self) &amp;&amp; controller != noone)
{
    if (fighter_on_ground(self))
    {
        move_direction = 0;
        
        //dash left
        if (controller.left_dash &amp;&amp; !dashing)
        {
            dashing = true;
            hspeed = -global.BASE_DASH_SPEED * dash_speed;
            blocking = false;
        }
        //dash right
        else if (controller.right_dash &amp;&amp; !dashing)
        {
            dashing = true;
            hspeed = global.BASE_DASH_SPEED * dash_speed;
            blocking = false;
        }
        else
        {
            if (!blocking || controller.upP)
            {
                //move left
                if (controller.left &amp;&amp; (!dashing || hspeed &gt;= 0))
                {
                    move_direction -= 1;
                    move_action = true;
                }
                //move right
                else if (controller.right &amp;&amp; (!dashing || hspeed &lt;= 0))
                {
                    move_direction += 1;
                    move_action = true;
                }
            }
            
            //lower block
            if (blocking &amp;&amp; !controller.block &amp;&amp; hitstun &lt;= 0)
            {
                blocking = false;
                hitstun += global.LOWER_BLOCK_LAG;
            }
            
            //jump
            if (controller.up)
            {
                vspeed += global.BASE_JUMP_SPEED * jump_speed;
                move_action = true;
                blocking = false;
            }
            //raise block
            else if (controller.block &amp;&amp; !blocking &amp;&amp; !dashing)
            {
                move_direction = 0;
                blocking = true;
                dashing = false;
                hitstun += global.RAISE_BLOCK_LAG;
            }
            //punch
            else if (controller.punch)
            {
                move_direction = 0;
                currentAttack = 0;
                move_action = true;
                blocking = false;
            }
            //kick
            else if (controller.kick)
            {
                move_direction = 0;
                currentAttack = 1;
                move_action = true;
                blocking = false;
            }
            //special
            else if (controller.special)
            {
                move_direction = 0;
                currentAttack = 2;
                move_action = true;
                blocking = false;
            }
        }
    }
    else if (!blocking)
    {
        if (controller.punch)
        {
            currentAttack =3;
        }
        //kick
        else if (controller.kick)
        {
            currentAttack = 4;
        }
        //special
        else if (controller.special)
        {
            currentAttack = 5;
        }
    }
}
else if (!fighter_can_act(self) &amp;&amp; fighter_on_ground(self) &amp;&amp; move_direction != 0)
{
    move_direction = 0;
}

if (move_action)
{
    if (dashing)
    {
        dashing = false;
        hspeed = 0;
        hitstun += global.END_DASH_LAG;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite = noone;
frame = 0;
col = c_white;
if (darkened)
    col = make_color_rgb(196,196,196);

if (fighter_on_ground(self))
{
    if (dashing)
    {
        if (hspeed * facing &lt;= 0)
            sprite = jumpBSprite;
        else
            sprite = jumpFSprite;
    }
    else
    {
        if (move_direction == 0)
            sprite = standSprite;
        else
        {
            sprite = walkSprite;
            frame = walkTimer mod 2;
        }
    }
}
else
{
    if (move_direction * facing &lt;= 0)
        sprite = jumpBSprite;
    else
        sprite = jumpFSprite;
}

if (currentAttack != -1 &amp;&amp; attackSprites[currentAttack] != noone)
{
    sprite = attackSprites[currentAttack];
    if (attackProgress &gt; attackDurations[currentAttack, 1])
        frame = 2;
    else if (attackProgress &gt; attackDurations[currentAttack, 0])
        frame = 1;
}

if (blocking)
{
    sprite = blockSprite;
    if (!darkened)
        col = make_color_rgb(224,224,224);
    else
        col = make_color_rgb(164,164,164);
}

if (sprite != noone)
{
    draw_sprite_ext(sprite, frame,
                x_convert(x), y_convert(y),
                facing,1,
                0, col, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>36,96</point>
    <point>48,48</point>
  </PhysicsShapePoints>
</object>
